name: Sync charts to site

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout site repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Prepare folders (cache before/after)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p docs/charts
          mkdir -p .cache_old
          rsync -a docs/charts/ .cache_old/ || true

      - name: Download latest from sub-repos
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Downloading charts from subrepos ==="

          # sub-repo -> ファイル名の key の対応表
          declare -A REPOS=(
            ["astra4"]="SakuraIndex/3_Sakura_Space"
            ["scoin_plus"]="SakuraIndex/S-COIN-"
            ["rbank9"]="SakuraIndex/R-BANK9"
            ["ain10"]="SakuraIndex/AIN-10"
          )

          # 取得するファイル拡張（サフィックス）
          # 例: astra4_1d.png / astra4_7d.png / astra4_1m.png / astra4_1y.png
          #     astra4_intraday.png / astra4_post_intraday.txt / astra4_history.csv
          FILES=("1d.png" "7d.png" "1m.png" "1y.png" "intraday.png" "post_intraday.txt" "history.csv")

          total=0
          success=0

          for key in "${!REPOS[@]}"; do
            repo="${REPOS[$key]}"
            for suffix in "${FILES[@]}"; do
              total=$((total+1))
              src="https://raw.githubusercontent.com/${repo}/main/docs/outputs/${key}_${suffix}"
              dst="docs/charts/${key}_${suffix}"
              echo "Fetching: $src"
              if curl -fsSL --retry 3 --retry-delay 2 "$src" -o "$dst"; then
                echo "  ✅ saved -> $dst"
                success=$((success+1))
              else
                echo "  ❌ missing -> $src"
                rm -f "$dst" || true
              fi
            done
          done

          echo "=== Summary ==="
          echo "Downloaded $success / $total files successfully."
          echo "==============="

      - name: List AFTER download
        shell: bash
        run: |
          set -euo pipefail
          echo "=== AFTER ==="
          ls -lah docs/charts || true

      # ←← ここが修正の肝：先に add/commit、その後 push。push が NG なら rebase+autostash の順
      - name: Commit & Push (only if changed)
        shell: bash
        run: |
          set -euo pipefail

          BRANCH="${{ github.ref_name }}"
          [ -z "$BRANCH" ] && BRANCH="main"

          # 差分がなければ終了
          if diff -qr .cache_old docs/charts >/dev/null 2>&1; then
            echo "No chart changes."
            exit 0
          fi

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$PWD"

          # まずは必ず add/commit（未ステージが原因の rebase 失敗を防ぐ）
          git add -A docs/charts
          if git diff --cached --quiet; then
            echo "Nothing to commit after staging."
            exit 0
          fi

          git commit -m "chore(site): sync updated charts"

          # まずはそのまま push を試す（fast-forward ならこれで OK）
          if git push origin "HEAD:${BRANCH}"; then
            echo "Pushed without rebase."
            exit 0
          fi

          # 非 fast-forward や保護設定で弾かれた場合のみ rebase を実施
          echo "Push rejected; rebasing onto origin/${BRANCH}…"
          git fetch origin "${BRANCH}"
          git pull --rebase --autostash origin "${BRANCH}"
          git push origin "HEAD:${BRANCH}"

      # 目視用の確認ログ
      - name: Verify updated charts
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Updated charts (latest) ==="
          ls -lh docs/charts || true
