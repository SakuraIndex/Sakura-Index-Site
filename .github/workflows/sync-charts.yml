name: Sync charts to site

on:
  workflow_dispatch:
  repository_dispatch:
    types: [charts-updated]
  schedule:
    - cron: "15 * * * *"   # 任意。不要なら削除

permissions:
  contents: write

concurrency:
  group: sync-charts-${{ github.ref }}
  cancel-in-progress: false

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout site repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Prepare folders (cache before/after)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p docs/charts
          mkdir -p .cache_old
          rsync -a docs/charts/ .cache_old/ || true

      - name: Download latest from sub-repos (atomic)
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Downloading charts from subrepos (atomic) ==="

          declare -A REPOS=(
            ["astra4"]="SakuraIndex/3_Sakura_Space"
            ["scoin_plus"]="SakuraIndex/S-COIN-"
            ["rbank9"]="SakuraIndex/R-BANK9"
            ["ain10"]="SakuraIndex/AIN-10"
          )

          FILES=("1d.png" "7d.png" "1m.png" "1y.png" "intraday.png" "post_intraday.txt" "history.csv" "stats.json")

          tmpdir="$(mktemp -d)"
          mkdir -p "$tmpdir"

          total=0; updated=0; unchanged=0; missed=0

          for key in "${!REPOS[@]}"; do
            repo="${REPOS[$key]}"
            for suffix in "${FILES[@]}"; do
              total=$((total+1))
              src="https://raw.githubusercontent.com/${repo}/main/docs/outputs/${key}_${suffix}"
              dst_tmp="${tmpdir}/${key}_${suffix}"
              dst_cur="docs/charts/${key}_${suffix}"

              if [ -f "$dst_cur" ]; then
                if curl -fsSL --retry 3 --retry-delay 2 -z "$dst_cur" "$src" -o "$dst_tmp"; then
                  if [ -s "$dst_tmp" ]; then
                    echo "  ✅ updated -> ${key}_${suffix}"
                    updated=$((updated+1))
                  else
                    cp -f "$dst_cur" "$dst_tmp"
                    echo "  ↔︎ unchanged -> ${key}_${suffix}"
                    unchanged=$((unchanged+1))
                  fi
                else
                  echo "  ❌ fetch error (kept old) -> ${key}_${suffix}"
                  [ -f "$dst_cur" ] && cp -f "$dst_cur" "$dst_tmp" || true
                  missed=$((missed+1))
                fi
              else
                if curl -fsSL --retry 3 --retry-delay 2 "$src" -o "$dst_tmp"; then
                  echo "  ✅ new -> ${key}_${suffix}"
                  updated=$((updated+1))
                else
                  echo "  ❌ missing (no old to keep) -> ${key}_${suffix}"
                  missed=$((missed+1))
                fi
              fi
            done
          done

          echo "=== Summary ==="
          echo "Total: $total, Updated: $updated, Unchanged: $unchanged, Missed: $missed"
          echo "================"

          rsync -a --delete "$tmpdir"/ docs/charts/
          rm -rf "$tmpdir"

      - name: List AFTER download
        shell: bash
        run: |
          set -euo pipefail
          echo "=== AFTER ==="
          ls -lah docs/charts || true

      - name: Commit & Push (only if changed)
        shell: bash
        run: |
          set -euo pipefail
          BRANCH="${{ github.ref_name }}"
          [ -z "$BRANCH" ] && BRANCH="main"

          if diff -qr .cache_old docs/charts >/dev/null 2>&1; then
            echo "No chart changes."
            exit 0
          fi

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$PWD"

          git add -A docs/charts
          git commit -m "chore(site): sync updated charts"
          if git push origin "HEAD:${BRANCH}"; then
            exit 0
          fi

          echo "Push rejected; rebasing onto origin/${BRANCH}…"
          git fetch origin "${BRANCH}"
          git pull --rebase --autostash origin "${BRANCH}"
          git push origin "HEAD:${BRANCH}"

      - name: Verify updated charts
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Updated charts (latest) ==="
          ls -lh docs/charts || true
