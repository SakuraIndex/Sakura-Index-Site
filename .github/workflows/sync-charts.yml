name: Sync charts to site (intraday + 7d/1m/1y + stats)

on:
  workflow_dispatch:
  schedule:
    - cron: '10 * * * *'  # 毎時10分

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Pull latest charts from index repos (robust, meta-gated)
        shell: bash
        run: |
          set -euo pipefail

          # ====== dst ======
          d_ast="docs/charts/ASTRA4"
          d_rbk="docs/charts/R_BANK9"
          d_ain="docs/charts/AIN10"
          d_scp="docs/charts/S-COIN+"
          mkdir -p "$d_ast" "$d_rbk" "$d_ain" "$d_scp"

          # ====== src ======
          b_ast="https://raw.githubusercontent.com/SakuraIndex/3_Sakura_Space/main/docs/outputs"
          b_rbk="https://raw.githubusercontent.com/SakuraIndex/R-BANK9/main/docs/outputs"
          b_ain="https://raw.githubusercontent.com/SakuraIndex/AIN-10/main/docs/outputs"
          b_scp="https://raw.githubusercontent.com/SakuraIndex/S-COIN-/main/docs/outputs"

          # ====== helpers ======
          # HEAD検査：200 且つ image/* 且つ 4KB以上 を OK
          head_ok () {
            local url="$1"
            local h status ctype clen
            h="$(curl -fsSLI "$url" || true)"
            [[ -n "$h" ]] || return 1
            status="$(printf '%s' "$h" | awk 'toupper($0) ~ /^HTTP/ {code=$2} END{print code}')"
            ctype="$(printf '%s' "$h" | awk 'BEGIN{IGNORECASE=1} /^content-type:/ {print $2}' | tr -d '\r')"
            clen="$(printf '%s' "$h" | awk 'BEGIN{IGNORECASE=1} /^content-length:/ {print $2}' | tr -d '\r')"
            [[ "$status" == "200" ]] || return 1
            [[ "$ctype" == image/* || "$ctype" =~ ^image/ ]] || return 1
            [[ "${clen:-0}" -ge 4096 ]] || return 1
            return 0
          }
          fetch_img () { # 保存は head_ok を通った場合のみ
            local url="$1" out="$2"
            if head_ok "$url"; then
              echo "IMG OK: $url"
              curl -fsSL "$url" -o "$out"
              return 0
            else
              echo "IMG NG: $url"
              return 1
            fi
          }
          fetch_txt () { # 200 のみ保存
            local url="$1" out="$2"
            if curl -fsSL "$url" -o "$out.tmp"; then
              mv "$out.tmp" "$out"
              echo "TXT OK: $url"
              return 0
            else
              echo "TXT NG: $url"
              rm -f "$out.tmp" || true
              return 1
            fi
          }
          copy_first_img () { # out, urls...
            local out="$1"; shift
            local hit=""
            for u in "$@"; do
              if fetch_img "$u" "$out"; then hit=1; break; fi
            done
            [[ -n "$hit" ]]
          }
          copy_first_txt () { # out, urls...
            local out="$1"; shift
            local hit=""
            for u in "$@"; do
              if fetch_txt "$u" "$out"; then hit=1; break; fi
            done
            [[ -n "$hit" ]]
          }

          # 命名ゆらぎ
          ain_png() { # $1: suffix
            echo "$b_ain/ain10_$1.png" "$b_ain/ain_10_$1.png" "$b_ain/ain-10_$1.png"
          }
          scoin_png() { # $1: suffix
            echo "$b_scp/scoin_plus_$1.png" "$b_scp/s_coin_plus_$1.png" "$b_scp/s-coin_plus_$1.png" "$b_scp/s_coin__${1}.png"
          }
          ain_post_txts() {
            echo "$b_ain/ain10_post_intraday.txt" "$b_ain/ain10_intraday_post.txt" \
                 "$b_ain/ain_10_post_intraday.txt" "$b_ain/ain_10_intraday_post.txt" \
                 "$b_ain/ain-10_post_intraday.txt" "$b_ain/ain-10_intraday_post.txt"
          }
          scoin_post_txts() {
            echo "$b_scp/scoin_plus_post_intraday.txt" "$b_scp/scoin_plus_intraday_post.txt" \
                 "$b_scp/s_coin_plus_post_intraday.txt" "$b_scp/s_coin_plus_intraday_post.txt" \
                 "$b_scp/s-coin_plus_post_intraday.txt" "$b_scp/s-coin_plus_intraday_post.txt" \
                 "$b_scp/s_coin__post_intraday.txt" "$b_scp/s_coin__intraday_post.txt"
          }

          # ====== gate logic: 「メタが取れたら intraday.png を更新」 ======
          # 更新フラグ
          upd_ast=0; upd_rbk=0; upd_ain=0; upd_scp=0

          # ASTRA4 meta（どちらか片方でもOK）
          copy_first_txt "$d_ast/intraday.txt" "$b_ast/astra4_post_intraday.txt" "$b_ast/astra4_intraday_post.txt" "$b_ast/astra4_intraday.txt" && upd_ast=1 || true
          copy_first_txt "$d_ast/stats.json"   "$b_ast/astra4_stats.json" && upd_ast=1 || true
          # R-BANK9
          copy_first_txt "$d_rbk/intraday.txt" "$b_rbk/rbank9_post_intraday.txt" "$b_rbk/rbank9_intraday_post.txt" "$b_rbk/rbank9_intraday.txt" && upd_rbk=1 || true
          copy_first_txt "$d_rbk/stats.json"   "$b_rbk/rbank9_stats.json" && upd_rbk=1 || true
          # AIN-10
          copy_first_txt "$d_ain/intraday.txt" $(ain_post_txts) && upd_ain=1 || true
          copy_first_txt "$d_ain/stats.json"   "$b_ain/ain10_stats.json" "$b_ain/ain_10_stats.json" "$b_ain/ain-10_stats.json" && upd_ain=1 || true
          # S-COIN+
          copy_first_txt "$d_scp/intraday.txt" $(scoin_post_txts) && upd_scp=1 || true
          copy_first_txt "$d_scp/stats.json"   "$b_scp/scoin_plus_stats.json" "$b_scp/s_coin_plus_stats.json" "$b_scp/s-coin_plus_stats.json" "$b_scp/s_coin__stats.json" && upd_scp=1 || true

          echo "META OK flags => AST:${upd_ast} RBK:${upd_rbk} AIN:${upd_ain} SCP:${upd_scp}"

          # ====== long-term images は常に更新トライ（安全チェック付き） ======
          copy_first_img "$d_ast/7d.png" "$b_ast/astra4_7d.png" || true
          copy_first_img "$d_ast/1m.png" "$b_ast/astra4_1m.png" || true
          copy_first_img "$d_ast/1y.png" "$b_ast/astra4_1y.png" || true

          copy_first_img "$d_rbk/7d.png" "$b_rbk/rbank9_7d.png" || true
          copy_first_img "$d_rbk/1m.png" "$b_rbk/rbank9_1m.png" || true
          copy_first_img "$d_rbk/1y.png" "$b_rbk/rbank9_1y.png" || true

          copy_first_img "$d_ain/7d.png" $(ain_png 7d) || true
          copy_first_img "$d_ain/1m.png" $(ain_png 1m) || true
          copy_first_img "$d_ain/1y.png" $(ain_png 1y) || true

          copy_first_img "$d_scp/7d.png"  $(scoin_png 7d) || true
          copy_first_img "$d_scp/1m.png"  $(scoin_png 1m) || true
          copy_first_img "$d_scp/1y.png"  $(scoin_png 1y) || true

          # ====== intraday（原本1dをメタゲートで更新） ======
          if [[ $upd_ast -eq 1 ]]; then copy_first_img "$d_ast/intraday.png" "$b_ast/astra4_1d.png" || true; fi
          if [[ $upd_rbk -eq 1 ]]; then copy_first_img "$d_rbk/intraday.png" "$b_rbk/rbank9_1d.png" || true; fi
          if [[ $upd_ain -eq 1 ]]; then copy_first_img "$d_ain/intraday.png" $(ain_png 1d) || true; fi
          if [[ $upd_scp -eq 1 ]]; then copy_first_img "$d_scp/intraday.png" $(scoin_png 1d) || true; fi

          # ====== last_run （原本の _last_run があれば採用、なければUTC現在） ======
          fetch_txt "$b_ast/_last_run.txt" "$d_ast/last_run.txt" || date -u +'%Y-%m-%dT%H:%M:%SZ' > "$d_ast/last_run.txt"
          fetch_txt "$b_rbk/_last_run.txt" "$d_rbk/last_run.txt" || date -u +'%Y-%m-%dT%H:%M:%SZ' > "$d_rbk/last_run.txt"
          fetch_txt "$b_ain/_last_run.txt" "$d_ain/last_run.txt" || date -u +'%Y-%m-%dT%H:%M:%SZ' > "$d_ain/last_run.txt"
          fetch_txt "$b_scp/_last_run.txt" "$d_scp/last_run.txt" || date -u +'%Y-%m-%dT%H:%M:%SZ' > "$d_scp/last_run.txt"

          # ====== cleanup（旧パス掃除：あっても無視） ======
          git rm -f docs/charts/ain10_*.png docs/charts/*_history.csv docs/charts/*_intraday.png 2>/dev/null || true

          echo "--- after sync ---"
          ls -l docs/charts/ASTRA4 || true
          ls -l docs/charts/R_BANK9 || true
          ls -l docs/charts/AIN10 || true
          ls -l docs/charts/S-COIN+ || true

      - name: Commit & push if changed
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/charts/**/*
          if git diff --cached --quiet; then
            echo "No changes detected."
            exit 0
          fi
          git commit -m "chore(site): meta-gated intraday sync (only update when text/stats present) + safe image validation + preserve last good"
          git pull --rebase origin main || true
          git push --force-with-lease origin HEAD:main || echo "Push skipped or failed"
